<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on zhangsp&#39;s blog</title>
    <link>https://zhangshp.github.io/categories/go/</link>
    <description>Recent content in Go on zhangsp&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 May 2018 08:30:46 +0800</lastBuildDate>
    
	<atom:link href="https://zhangshp.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go语言WebSocket协议的简单实现</title>
      <link>https://zhangshp.github.io/go%E8%AF%AD%E8%A8%80websocket%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 25 May 2018 08:30:46 +0800</pubDate>
      
      <guid>https://zhangshp.github.io/go%E8%AF%AD%E8%A8%80websocket%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>WebSocket 是什么？ WebSocket是HTML5开始提供的一种在单个 TCP 连接上进行全双工通讯的协议，允许服务器主动发送信息给客户端。
我们只实现文本消息的读写，不考虑扩展协议与分帧的情况。主要包括以下步骤：
 握手 数据帧  接受来自客户端的数据帧 向客户端发送数据帧  关闭连接  握手Handshake 浏览器请求 浏览器通过 HTTP GET 请求发送handshake 请求，HTTP协议版本必须为 1.1 或者更高，请求方法必须为 GET :
GET /chat HTTP/1.1 Host: example.com:8000 Upgrade: websocket Connection: Upgrade Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ== Sec-WebSocket-Version: 13 Sec-WebSocket-Version: 13：13为最新的 WebSocke t版本
如果请求头里面有任何服务端不理解或者错误的值，服务端应当发送 400 Bad Request ，并且立即关闭连接。
服务器返回 HTTP/1.1 101 Switching Protocols Upgrade: websocket Connection: Upgrade Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo= Sec-WebSocket-Accept：服务端获取请求头里的 Sec-WebSocket-Key 的值加上 258EAFA5-E914-47DA-95CA-C5AB0DC85B11 进行 SHA-1 hash 运算并将结果做 base64 编码。</description>
    </item>
    
    <item>
      <title>Go语言与以太坊智能合约交互</title>
      <link>https://zhangshp.github.io/go%E8%AF%AD%E8%A8%80%E4%B8%8E%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E4%BA%A4%E4%BA%92/</link>
      <pubDate>Tue, 22 May 2018 08:51:28 +0800</pubDate>
      
      <guid>https://zhangshp.github.io/go%E8%AF%AD%E8%A8%80%E4%B8%8E%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E4%BA%A4%E4%BA%92/</guid>
      <description>创建以太坊账户 首先通过 go get -u github.com/ethereum/go-ethereum 安装go-ethereum，创建账户需要引入 github.com/ethereum/go-ethereum/accounts/keystore 下面是代码：
// func NewKeyStore(keydir string, scryptN, scryptP int) *KeyStore ks := keystore.NewKeyStore(&amp;#34;/Users/mac/Library/Ethereum/keystore&amp;#34;, 262144, 1) //func (ks *KeyStore) NewAccount(passphrase string) (accounts.Account, error) account, err := ks.NewAccount(&amp;#34;pwd&amp;#34;) // 解锁账户的密码 if err != nil { panic(err.Error()) } fmt.Println(account.Address.Hex()) // 十六进制账户地址0x1Ec0f4C1dd672263E70b8f75916d12f3AB95452A fmt.Println(account.URL.Path) // 路径 /Users/mac/Library/Ethereum/keystore/UTC--2018-05-17T08-55-53.520103309Z--1ec0f4c1dd672263e70b8f75916d12f3ab95452a keystore.NewKeyStore 方法的第一个参数 keydir 是指定存放 keystore 的文件夹，第二个参数 scryptN 是 scrypt 算法中的的 CPU/内存消耗参数，必须大于1, 它是2的n次幂并且小于2^(128 * r / 8)，官方包用的 1 &amp;lt;&amp;lt; 18 也就是262144，第三个参数 scryptP 是 scrypt 算法中的并行化参数，一个小于等于((2^32-1) * hLen) / MFLen的正整数，其中hLen为 32，MFlen是128 * r。（在ltc协议中 p = 1）官方包用的 1。</description>
    </item>
    
    <item>
      <title>Go语言的一些陷阱总结</title>
      <link>https://zhangshp.github.io/go%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E4%BA%9B%E9%99%B7%E9%98%B1%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 04 May 2018 21:27:01 +0800</pubDate>
      
      <guid>https://zhangshp.github.io/go%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E4%BA%9B%E9%99%B7%E9%98%B1%E6%80%BB%E7%BB%93/</guid>
      <description>给空map赋值 var m map[string]int m[&amp;#34;1&amp;#34;] = 1 //panic: assignment to entry in nil map  在给 map 添加元素 之前必须使用 make 初始化
m := make(map[string]int) m[&amp;#34;1&amp;#34;] = 1 未初始化的指针 type Point struct { X, Y float64 } func (p *Point) Abs() float64 { return math.Sqrt(p.X*p.X + p.Y*p.Y) } func main() { var p *Point fmt.Println(p.Abs())//panic: runtime error: invalid memory address or nil pointer dereference } 未初始化的指针为nil，它的地址是非法的，要使用指针，必须保证其不为nil。可以修改为下面的：
func main(){ p = new(Point) fmt.</description>
    </item>
    
  </channel>
</rss>