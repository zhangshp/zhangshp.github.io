<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zhangsp&#39;s blog</title>
    <link>https://zhangshp.github.io/</link>
    <description>Recent content on zhangsp&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 May 2018 08:51:55 +0800</lastBuildDate>
    
        <atom:link href="https://zhangshp.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>Fetch API入门</title>
      <link>https://zhangshp.github.io/fetch-api%E5%85%A5%E9%97%A8/</link>
      <pubDate>Tue, 15 May 2018 08:51:55 +0800</pubDate>
      
      <guid>https://zhangshp.github.io/fetch-api%E5%85%A5%E9%97%A8/</guid>
      <description>近几年 XMLHttpRequest 已经成为 web 开发者的得力助手，然而最近 XMLHttpRequest 正在慢慢的被 Fetch API 替代。两者都可以发送网络请求，但是 Fetch API 是基于Promise的，Promise 可以减少回调函数，使代码更清晰易读。
Fetch API Fetch API 提供了定义在 window 对象上的 fetch() 方法，该方法可以用来实现发送请求。fetch() 返回一个 response 的Promise。
fetch 方法只有一个 URL 强制参数，下面是一个最基础的例子：
fetch(&amp;#39;https://www.reddit.com/r/javascript/top/.json?limit=5&amp;#39;) .then(res =&amp;gt; console.log(res));  把上面的代码复制到浏览器的控制台，你会看到下面的结果：
fetch(&amp;#39;https://www.reddit.com/r/javascript/top/.json?limit=5&amp;#39;) .then(res =&amp;gt; console.log(res)); Promise {&amp;lt;pending&amp;gt;} __proto__: Promise [[PromiseStatus]]: &amp;#34;resolved&amp;#34; [[PromiseValue]]: undefined VM846:2 Response {type: &amp;#34;cors&amp;#34;, url: &amp;#34;https://www.reddit.com/r/javascript/top/.json?limit=5&amp;#34;, redirected: false, status: 200, ok: true, …} body: (...) bodyUsed: false headers: Headers {} ok: true redirected: false status: 200 statusText: &amp;#34;&amp;#34; type: &amp;#34;cors&amp;#34; url: &amp;#34;https://www.</description>
    </item>
    
    
    
    <item>
      <title>Go语言的一些陷阱总结</title>
      <link>https://zhangshp.github.io/go%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E4%BA%9B%E9%99%B7%E9%98%B1%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 04 May 2018 21:27:01 +0800</pubDate>
      
      <guid>https://zhangshp.github.io/go%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E4%BA%9B%E9%99%B7%E9%98%B1%E6%80%BB%E7%BB%93/</guid>
      <description>给空map赋值 var m map[string]int m[&amp;#34;1&amp;#34;] = 1 //panic: assignment to entry in nil map  在给 map 添加元素 之前必须使用 make 初始化
m := make(map[string]int) m[&amp;#34;1&amp;#34;] = 1 未初始化的指针 type Point struct { X, Y float64 } func (p *Point) Abs() float64 { return math.Sqrt(p.X*p.X + p.Y*p.Y) } func main() { var p *Point fmt.Println(p.Abs())//panic: runtime error: invalid memory address or nil pointer dereference } 未初始化的指针为nil，它的地址是非法的，要使用指针，必须保证其不为nil。可以修改为下面的：
func main(){ p = new(Point) fmt.</description>
    </item>
    
    
    
    <item>
      <title>Certbot免费获取HTTPS证书</title>
      <link>https://zhangshp.github.io/certbot%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96https%E8%AF%81%E4%B9%A6/</link>
      <pubDate>Fri, 04 May 2018 09:10:11 +0800</pubDate>
      
      <guid>https://zhangshp.github.io/certbot%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96https%E8%AF%81%E4%B9%A6/</guid>
      <description>Let&amp;rsquo;s Encrypt与Certbot介绍 Let&amp;rsquo;s Encrypt是一个公共且免费SSL的项目，由Mozilla、Cisco、Akamai、IdenTrust、EFF等组织人员发起，主要的目的是为了推进网站从HTTP向HTTPS过度的进程，目前已经有越来越多的商家加入和赞助支持。
Certbot是一款易用的自动获取和部署SSL/TLS证书的工具。Certbot由EFF开发，被称为 Let’s Encrypt 官方客户端。我们获取免费证书的工具就是Certbot。
安装Certbot 推荐上Certbot 官网安装，如果没有找到相对应的操作系统和服务器软件则执行下面命令安装：
wget https://dl.eff.org/certbot-auto chmod a+x certbot-auto Ubuntu 16及更高版本如果出现setuptools pkg_resources pip wheel failed with error code 1 错误，请执行以下命令：
sudo apt-get install letsencrypt export LC_ALL=&amp;#34;en_US.UTF-8&amp;#34; export LC_CTYPE=&amp;#34;en_US.UTF-8&amp;#34; Certbot两种模式以及证书配置  Webroot  如果我们有权限修改服务器上的文件，并且不希望在证书获取过程中停止服务器的话可以使用Webroot模式。
certbot certonly --webroot -w /var/www/example -d www.example.com --webroot 指定Webroot模式
-w 指定网站根目录(webroot-path)
-d 指定域名
Webroot模式在网站根目录下创建临时文件({webroot-path}/.well-known/acme-challenge)，然后Let’s Encrypt 通过发送HTTP请求去验证域名和服务器是否属于你。为了能通过验证，我们必须配置服务器以便能访问到隐藏的目录(.well-known/acme-challenge)。下面是nginx的配置的例子：
location /.well-known/acme-challenge { default_type &amp;#34;text/plain&amp;#34;; root /var/www/example/; } 其实 -w 可以为任意目录，但是必须保证Let’s Encrypt 通过发送HTTP请求去验证的时候能访问到该目录。</description>
    </item>
    
    
  </channel>
</rss>
